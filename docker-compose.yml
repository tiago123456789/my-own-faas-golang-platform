version: "3"

services:
  database:
    image: postgres:14
    container_name: lambda_platform_database
    restart: always
    environment:
      POSTGRES_DB: lambda_platform_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    networks:
      - my-own-lambda

  queue:
    image: nats-streaming:latest
    container_name: nats-streaming-server
    environment:
      - NATS_STREAMING_CLUSTER_ID=test-cluster
      - NATS_STREAMING_STORE=MEMORY # Store messages in memory (default is file-based persistence)
      - NATS_STREAMING_CLIENT_ID=nats-streaming-server
    ports:
      - "4222:4222" # NATS port
      - "8222:8222" # NATS HTTP monitoring port
      - "7777:7777" # NATS Streaming port
    restart: unless-stopped
    networks:
      - my-own-lambda

  cache:
    image: redis
    ports:
      - 6379:6379
    container_name: lambda_platform_cache
    networks:
      - my-own-lambda

  proxy:
    build:
      context: .
      dockerfile: Dockerfile.proxy
    ports:
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: lambda_platform_proxy
    networks:
      - my-own-lambda
    depends_on:
      - queue
      - cache
      - database

  builder:
    build:
      context: .
      dockerfile: Dockerfile.builder
    volumes:
      - ./uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: lambda_platform_builder
    networks:
      - my-own-lambda
    depends_on:
      - queue
      - cache
      - database

  faas_manager:
    build:
      context: .
      dockerfile: Dockerfile.faasManager
    ports:
      - 3000:3000
    volumes:
      - ./uploads:/app/uploads
    container_name: lambda_platform_faas_manager
    networks:
      - my-own-lambda
    depends_on:
      - queue
      - cache
      - database

  log_collector:
    build:
      context: .
      dockerfile: Dockerfile.logCollector
    ports:
      - 5050:5050
    container_name: lambda_platform_log_collector
    networks:
      - my-own-lambda
    depends_on:
      - queue
      - cache

  log_collector_worker:
    build:
      context: .
      dockerfile: Dockerfile.logCollectorWorker
    container_name: lambda_platform_log_collector_worker
    networks:
      - my-own-lambda
    depends_on:
      - queue
      - cache

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: lambda_platform_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms524m -Xmx524m"
      - "http.publish_host=_local_"
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - my-own-lambda

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: lambda_platform_kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - my-own-lambda

networks:
  my-own-lambda:
    name: my-own-lambda

volumes:
  esdata:
    driver: local
